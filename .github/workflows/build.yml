name: Build

on:
  push:
    branches:
      - master
    tags:
      - v*
  pull_request:
    types: [ opened, synchronize, reopened ]

jobs:
  build:
    name: Build
    runs-on: [ windows-latest ]

    strategy:
      matrix:
        buildtype: [ RelWithDebInfo, Debug ]

    steps:
    - name: Get latest CMake and ninja
      uses: lukka/get-cmake@latest

    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Setup VS environment
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Generate projects
      run: |
        mkdir _build-${{ matrix.buildtype }}
        cd _build-${{ matrix.buildtype }}
        cmake -G Ninja `
          -DCMAKE_BUILD_TYPE=${{ matrix.buildtype }} `
          -DCMAKE_CXX_COMPILER=cl `
          -DCMAKE_C_COMPILER=cl `
          ..

    - name: Build
      run: |
        cmake --build _build-${{ matrix.buildtype }}

    - name: Copy SDK and loader artifacts
      run: |
        cd _build-${{ matrix.buildtype }}
        mkdir _sdk
        Copy-Item ZHMModSDK/ZHMModSDK.dll -Destination _sdk/
        Copy-Item ZHMModSDK/ZHMModSDK.pdb -Destination _sdk/
        Copy-Item DirectInputProxy/dinput8.dll -Destination _sdk/
        Copy-Item DirectInputProxy/dinput8.pdb -Destination _sdk/
        Copy-Item ../LICENSE -Destination _sdk/

    - name: Copy devloader artifacts
      run: |
        cd _build-${{ matrix.buildtype }}
        mkdir _devloader
        Copy-Item Tools/DevLoader/DevLoader.exe -Destination _devloader/
        Copy-Item Tools/DevLoader/DevLoader.pdb -Destination _devloader/
        Copy-Item ../LICENSE -Destination _sdk/

    - name: Copy mod artifacts
      run: |
        cd _build-${{ matrix.buildtype }}
        mkdir _mods
        Get-ChildItem -Directory Mods | ForEach-Object { Copy-Item (Join-Path $_.FullName ($_.Name + ".dll")) -Destination (Join-Path "_mods"  ($_.Name + ".dll")) }
        Get-ChildItem -Directory Mods | ForEach-Object { Copy-Item (Join-Path $_.FullName ($_.Name + ".pdb")) -Destination (Join-Path "_mods"  ($_.Name + ".pdb")) }
        Copy-Item ../LICENSE -Destination _mods/

    - name: Archive SDK and loader
      uses: actions/upload-artifact@v2
      with:
        name: mod-loader-${{ matrix.buildtype }}
        path: |
          _build-${{ matrix.buildtype }}/_sdk/*

    - name: Archive mods
      uses: actions/upload-artifact@v2
      with:
        name: mods-${{ matrix.buildtype }}
        path: |
          _build-${{ matrix.buildtype }}/_mods/*

    - name: Archive devloader
      uses: actions/upload-artifact@v2
      if: matrix.buildtype == 'Debug'
      with:
        name: devloader-${{ matrix.buildtype }}
        path: |
          _build-${{ matrix.buildtype }}/_devloader/*

  create_release:
    name: Create release
    needs: build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest

    outputs:
      upload_url: ${{ steps.create.outputs.upload_url }}

    steps:
    - name: Create release
      id: create
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        draft: false
        prerelease: startsWith(github.ref, 'refs/tags/v0.')

  upload_release:
    name: Upload release artifacts
    needs: create_release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest

    strategy:
      matrix:
        artifact: [ mod-loader-RelWithDebInfo, mods-RelWithDebInfo, mod-loader-Debug, mods-Debug, devloader-Debug ]

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: ${{ matrix.artifact }}
        path: ${{ matrix.artifact }}

    - name: Archive artifact files
      run: |
        cd ${{ matrix.artifact }}
        zip -r ${{ matrix.artifact }}.zip *

    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ${{ matrix.artifact }}/${{ matrix.artifact }}.zip
        asset_name: ${{ matrix.artifact }}.zip
        asset_content_type: application/zip